name: Scrape YouTube Captions

on:
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes
  workflow_dispatch:  # Allow manual trigger
  repository_dispatch:
    types: [scrape_urls]  # Webhook API trigger

permissions:
  contents: write

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Clean up old shard system files
        run: |
          echo "Cleaning up old shard system files..."
          rm -rf data/ || true
          git clean -fd || true
          echo "Cleanup complete"

      - name: Process webhook URLs
        if: github.event_name == 'repository_dispatch'
        run: |
          echo "Processing webhook URLs..."
          echo '${{ toJson(github.event.client_payload.urls) }}' > webhook_urls.json
          if [ -f webhook_urls.json ] && [ -s webhook_urls.json ] && [ "$(cat webhook_urls.json)" != "null" ]; then
            echo "$(cat webhook_urls.json | jq -r '.[]')" > urls.txt
            echo "URLs added to processing queue:"
            cat urls.txt
          else
            echo "No URLs found in webhook payload"
          fi

      - name: Fetch URLs from webhook.site
        if: github.event_name == 'schedule'
        run: |
          echo "Fetching URLs from webhook.site..."
          curl -s "https://webhook.site/token/ac6c2303-e22b-4c2b-9a46-6d82de5e5cca/requests" | \
            jq -r '.data[]? | select(.method == "POST") | .content | fromjson | .urls[]?' | \
            sort -u > urls.txt || true
          if [ -s urls.txt ]; then
            echo "Found $(wc -l < urls.txt) unique URLs to process:"
            cat urls.txt
          else
            echo "No URLs found in webhook.site"
          fi

      - name: Filter existing videos
        run: |
          if [ -f urls.txt ] && [ -s urls.txt ]; then
            echo "Filtering out already processed videos..."
            while IFS= read -r url; do
              video_id=$(echo "$url" | sed -n 's/.*[?&]v=\([^&]*\).*/\1/p')
              if [ -n "$video_id" ] && [ ! -f "api/video/${video_id}.json" ]; then
                echo "$url"
              else
                echo "Skipping already processed: $video_id"
              fi
            done < urls.txt > new_urls.txt
            mv new_urls.txt urls.txt
            if [ -s urls.txt ]; then
              echo "$(wc -l < urls.txt) new videos to process:"
              cat urls.txt
            else
              echo "All videos already processed"
            fi
          fi

      - name: Run scraper
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: node scraper.js


      - name: Check for changes and commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are any changes
          if [[ -n $(git status --porcelain) ]]; then
            echo "Changes detected, committing..."
            git add api/
            git stash --include-untracked || true
            git pull --rebase || true
            git stash pop || true
            git add api/
            git commit -m "Update YouTube captions [skip ci]" || {
              echo "Commit failed, but continuing..."
              exit 0
            }
            git push || {
              echo "Push failed, but continuing..."
              exit 0
            }
            echo "Successfully committed and pushed changes"
          else
            echo "No changes to commit - this is normal and successful"
          fi